package com.jcv8.framegallery.image.logic;

import com.drew.lang.CompoundException;
import com.jcv8.framegallery.image.dataaccess.entity.Image;
import com.jcv8.framegallery.image.dataaccess.repository.ImageRepository;
import com.jcv8.framegallery.fileStorage.StorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.*;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Handles saving and retrieving Images from the filesystem as well as their properties in the database
 * */
@Service
public class ImageUploadService {

    private final Logger logger = Logger.getLogger(ImageUploadService.class.getName());

    @Autowired
    private StorageService storageService;

    @Autowired
    private ImageRepository imageRepository;


    @Autowired
    private ImageInfoService imageInfoService;

    /**
     * Saves a given MultipartFile to the file system.
     * The location is determined by the storageService, the file name is generated from the files uuid and the original extension.
     * @param file The file to be saved
     * @return the file's database entry, containing the path and other properties
     * @throws InvalidPathException when the original path of the given file does not contain an extension
     * @throws NullPointerException when the given file is null (thrown by the getOriginalFilename() call)
     */
    public Image saveImage(MultipartFile file) throws InvalidPathException, NullPointerException {
        Image image = new Image();
        imageRepository.save(image);
        Path imagePath = generateUUIDPath(image.getId(), file.getOriginalFilename());
        storageService.store(imagePath, file);
        image.setPath(imagePath);
        try{
            image.setImageProperties(imageInfoService.readFileMetadata(file.getResource()));
        } catch (CompoundException | IOException e) {
            logger.warning(e.getMessage());
        }
        image.setPublished(false); // default: image not publicly visible
        return imageRepository.save(image);
    }

    /**
     * Generates a unique file name from an uuid and a given filename
     * @param id the uuid of the file, which has been generated by the repository beforehand
     * @param filename the original filename of the file. This is used to extract the extension
     * @return a unique file name
     * @throws InvalidPathException when the file name does not contain a file extension
     */
    private Path generateUUIDPath(UUID id, String filename) throws InvalidPathException {
        Pattern pattern = Pattern.compile("\\.([^.]+)$");
        Matcher matcher = pattern.matcher(filename);

        if (matcher.find()) {
            String extension = matcher.group(1);
            return Path.of(id + "." + extension);
        } else {
            throw new InvalidPathException(filename, "File does not have a extension");
        }
    }




}
